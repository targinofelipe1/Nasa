"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";
import Sidebar from "@/components/ui/Sidebar";
import ProtectedRoute from "@/components/ui/auth/ProtectedRoute";
import { Button } from "@/components/ui/Button";
import { useUser } from "@clerk/nextjs";
import { useRef } from "react";



const screenId = "ode_form";

// üîπ SETORES
const setores = [
  "Prote√ß√£o Social B√°sica",
  "Prote√ß√£o Social Especial de M√©dia Complexidade",
  "Prote√ß√£o Social Especial de Alta Complexidade",
  "Diretoria do SUAS",
  "Seguran√ßa Alimentar",
  "Engenharia",
  "FUNCEP",
  "Casa da Cidadania",
  "SINE",
  "Cadastro √önico e Bolsa Fam√≠lia",
  "Vigil√¢ncia Socioassistencial",
];

// üîπ REGI√ïES E MUNIC√çPIOS
const regioes: Record<string, string[]> = {
  "1¬™": ["ALHANDRA","BAYEUX","CAAPOR√É","CABEDELO","CONDE","CRUZ DO ESP√çRITO SANTO","LUCENA","MARI","PITIMBU","RIACH√ÉO DO PO√áO","SANTA RITA","SAP√â","SOBRADO","JO√ÉO PESSOA"],
  "2¬™": ["ALAGOINHA","ARA√áAGI","ARARUNA","BANANEIRAS","BEL√âM","BORBOREMA","CACIMBA DE DENTRO","CAI√áARA","CASSERENGUE","CUITEGI","DONA IN√äS","DUAS ESTRADAS","GUARABIRA","LOGRADOURO","MULUNGU","PIL√ïES","PIL√ïEZINHOS","PIRPIRITUBA","RIACH√ÉO","SERRA DA RAIZ","SERRARIA","SERT√ÉOZINHO","SOL√ÇNEA","TACIMA"],
  "3¬™": ["ALAGOA GRANDE","ALAGOA NOVA","ALCANTIL","ALGOD√ÉO DE JANDA√çRA","ARARA","AREIA","AREIAL","AROEIRAS","ASSUN√á√ÉO","BARRA DE SANTANA","BARRA DE S√ÉO MIGUEL","BOA VISTA","BOQUEIR√ÉO","CATURIT√â","CABACEIRAS","ESPERAN√áA","FAGUNDES","GADO BRAVO","JUAZEIRINHO","LAGOA SECA","LIVRAMENTO","MASSARANDUBA","MATINHAS","MONTADAS","NATUBA","OLIVEDOS","POCINHOS","PUXINAN√É","QUEIMADAS","REM√çGIO","RIACHO DE SANTO ANT√îNIO","SANTA CEC√çLIA","S√ÉO DOMINGOS DO CARIRI","S√ÉO SEBASTI√ÉO DE LAGOA DE RO√áA","SOLEDADE","TAPERO√Å","TEN√ìRIO","UMBUZEIRO","CAMPINA GRANDE"],
  "4¬™": ["BARA√öNA","BARRA DE SANTA ROSA","CUBATI","CUIT√â","DAMI√ÉO","FREI MARTINHO","NOVA FLORESTA","NOVA PALMEIRA","PEDRA LAVRADA","PICU√ç","S√ÉO VICENTE DO SERID√ì","SOSS√äGO"],
  "5¬™": ["AMPARO","CAMALA√ö","CARA√öBAS","CONGO","COXIXOLA","GURJ√ÉO","MONTEIRO","OURO VELHO","PARARI","PRATA","SANTO ANDR√â","S√ÉO JO√ÉO DO CARIRI","S√ÉO JO√ÉO DO TIGRE","S√ÉO JOS√â DOS CORDEIROS","S√ÉO SEBASTI√ÉO DO UMBUZEIRO","SERRA BRANCA","SUM√â","ZABEL√ä"],
  "6¬™": ["AREIA DE BARA√öNAS","CACIMBA DE AREIA","CACIMBAS","CATINGUEIRA","DESTERRO","EMAS","JUNCO DO SERID√ì","M√ÉE D'√ÅGUA","MALTA","MATUR√âIA","PASSAGEM","PATOS","QUIXABA","SALGADINHO","SANTA LUZIA","SANTA TERESINHA","S√ÉO JOS√â DE ESPINHARAS","S√ÉO JOS√â DO BONFIM","S√ÉO JOS√â DO SABUGI","S√ÉO MAMEDE","TEIXEIRA","V√ÅRZEA"],
  "7¬™": ["AGUIAR","BOA VENTURA","CONCEI√á√ÉO","COREMAS","CURRAL VELHO","DIAMANTE","IBIARA","IGARACY","ITAPORANGA","NOVA OLINDA","OLHO D'√ÅGUA","PEDRA BRANCA","PIANC√ì","SANTA IN√äS","SANTANA DE MANGUEIRA","SERRA GRANDE","SANTANA DOS GARROTES","S√ÉO JOS√â DE CAIANA"],
  "8¬™": ["BEL√âM DO BREJO DO CRUZ","BOM SUCESSO","BREJO DO CRUZ","BREJO DOS SANTOS","CATOL√â DO ROCHA","JERIC√ì","MATO GROSSO","RIACHO DOS CAVALOS","S√ÉO BENTO","S√ÉO JOS√â DO BREJO DO CRUZ"],
  "9¬™": ["BERNARDINO BATISTA","BONITO DE SANTA F√â","BOM JESUS","CACHOEIRA DOS √çNDIOS","CAJAZEIRAS","CARRAPATEIRA","JOCA CLAUDINO","MONTE HOREBE","PO√áO DANTAS","PO√áO DE JOS√â DE MOURA","SANTA HELENA","S√ÉO JO√ÉO DO RIO DO PEIXE","S√ÉO JOS√â DE PIRANHAS","TRIUNFO","UIRA√öNA"],
  "10¬™": ["LASTRO","MARIZ√ìPOLIS","NAZAREZINHO","SANTA CRUZ","S√ÉO FRANCISCO","S√ÉO JOS√â DA LAGOA TAPADA","SOUSA","VIEIR√ìPOLIS"],
  "11¬™": ["√ÅGUA BRANCA","IMACULADA","JURU","MANA√çRA","PRINCESA ISABEL","S√ÉO JOS√â DE PRINCESA","TAVARES"],
  "12¬™": ["CALDAS BRAND√ÉO","GURINH√âM","ING√Å","ITABAIANA","ITATUBA","JUAREZ T√ÅVORA","JURIPIRANGA","MOGEIRO","PEDRAS DE FOGO","PILAR","RIACH√ÉO DO BACAMARTE","SALGADO DE S√ÉO F√âLIX","S√ÉO JOS√â DOS RAMOS","S√ÉO MIGUEL DE TAIPU","SERRA REDONDA"],
  "13¬™": ["APARECIDA","CAJAZEIRINHAS","CONDADO","LAGOA","PAULISTA","POMBAL","S√ÉO BENTINHO","S√ÉO DOMINGOS","VISTA SERRANA"],
  "14¬™": ["BA√çA DA TRAI√á√ÉO","CAPIM","CUIT√â DE MAMANGUAPE","CURRAL DE CIMA","ITAPOROROCA","JACARA√ö","LAGOA DE DENTRO","MAMANGUAPE","MARCA√á√ÉO","MATARACA","PEDRO R√âGIS","RIO TINTO"],
};

// üîπ DESCRI√á√ÉO
const descricoes = [
  "Programa Estadual de Prote√ß√£o aos Defensores de Direitos Humanos - PEPDDH",
  "Programa de Prote√ß√£o √† V√≠timas e Testemunhas - PROVITA",
  "Programa de Prote√ß√£o a Crian√ßas e Adolescentes Amea√ßadas de Morte - PPCAAM",
  "Abrigamento dos Ind√≠genas Venezuelanos Migrantes Refugiados da etnia Warao",
  "N√∫cleo Estadual de Enfrentamento ao Tr√°fico de Pessoas da Para√≠ba",
  "Projeto Acolher",
  "Capacita SUAS",
  "Abono natalino",
  "T√° na mesa",
  "Restaurante Popular",
  "Novo T√° na mesa",
  "Cart√£o Alimenta√ß√£o",
  "PAA - LEITE",
  "PAA - CDS",
  "Cistenas",
  "Para√≠ba que Acolhe",
  "Cofinanciamento para CRAS, CREAS, UNIDADES DE ACOLHIMENTO, GEST√ÉO MUNICIPAIS E BENEFICIOS EVENTUAIS",
  "Programa Cidade Madura",
  "Outro",
];

// üîπ PROGRAMAS
const programas = [
  "5008 - Assist√™ncia Social, Direitos Humanos e Prote√ß√£o Social",
  "5009 - Assist√™ncia Social, Direitos Humanos e Prote√ß√£o Social",
  "(Novo PAC) 960186",
  "Trabalhadores(as)",
  "5008 - Assist√™ncia Social - Direitos Humanos e Prote√ß√£o Social",
  "5008 - Assist√™ncia Social - Direitos",
  "500 - Seguran√ßa Alimentar - Direitos",
  "PAA ALIMENTOS",
];

// üîπ A√á√ïES
const acoes = [
  "BENEFICI√ÅRIOS",
  "TRANSFER√äNCIA DE RENDA",
  "REFEI√á√ïES DI√ÅRIAS",
  "CISTERNAS",
  "BENEFICI√ÅRIOS ‚Äì PESSOA IDOSA",
  "SERVI√áO DE ACOLHIMENTO CRIAN√áA E ADOLESCENTE",
  "SERVI√áO DE ACOLHIMENTO FAM√çLIAS E ADULTOS",
  "BENEFICI√ÅRIOS ‚Äì (√ìRF√ÉOS DECORRENTE DA COVID-19)",
  "DOCUMENTA√á√ÉO B√ÅSICA",
];

// üîπ STATUS
const statusOptions = [
  "Cont√≠nuo",
  "A√ß√µes e/ou obras a iniciar, em licita√ß√£o ou a licitar",
  "A iniciar",
  "A√ß√µes e/ou obras conclu√≠das",
  "Conclu√≠do",
  "Em andamento",
  "A inaugurar (2025)/Lan√ßar",
  "Paralisado",
];

export default function OdeFormPage() {
  const { user, isLoaded } = useUser();
  const router = useRouter();
  const [hasPermission, setHasPermission] = useState(false);
  const [isVerifying, setIsVerifying] = useState(true);

  const [step, setStep] = useState(1);

  const toastShownRef = useRef(false);


  const [formData, setFormData] = useState<any>({
    nome: "",
    setor: "",
    regiao: "",
    municipio: "",
    descricao: "",
    outro: "",
    obra: "",
    servico: "",
    programa: "",
    acao: "",
    qtdBeneficios: "",
    status: "",
    ano: "",
    valor: "",
    fonte: "",
  });

  const [loading, setLoading] = useState(false);

  useEffect(() => {
  if (!isLoaded || !user) return;

  const verify = async () => {
    try {
      const res = await fetch(`/api/users/${user.id}/permissions`, {
        cache: "no-store",
      });
      const json = await res.json();

      const allowed = Array.isArray(json?.allowedTabs)
        ? json.allowedTabs.includes(screenId)
        : false;


      setHasPermission(allowed);

     if (!allowed && !toastShownRef.current) {
        toastShownRef.current = true; // üîπ marca que j√° exibiu
        toast.error("Acesso negado: voc√™ n√£o possui permiss√£o!");
        router.push("/");
      }
    } catch (e) {
      console.error("Falha ao verificar permiss√µes:", e);
      toast.error("Erro ao verificar permiss√µes.");
      router.push("/");
    } finally {
      setIsVerifying(false);
    }
  };

  verify();
}, [isLoaded, user, router]);


  useEffect(() => {
    if (isLoaded && user) {
      const fullName = `${user.firstName || ""} ${user.lastName || ""}`.trim();
      setFormData((prev: any) => ({ ...prev, nome: fullName }));
    }
  }, [isLoaded, user]);

  const handleChange = (field: string, value: string) => {
    setFormData((prev: any) => ({ ...prev, [field]: value }));
    if (field === "regiao") {
      setFormData((prev: any) => ({ ...prev, regiao: value, municipio: "" }));
    }
  };

  // üîπ Valida√ß√£o por etapa
  const isStepValid = (step: number) => {
    switch (step) {
      case 1:
        return formData.nome.trim() !== "" && formData.setor.trim() !== "";
      case 2:
        return formData.regiao.trim() !== "" && formData.municipio.trim() !== "";
      case 3:
        if (formData.descricao === "Outro") {
          return formData.outro.trim() !== "";
        }
        return formData.descricao.trim() !== "";
      case 4:
        return formData.programa.trim() !== "" && formData.acao.trim() !== "";
      case 5:
        return formData.status.trim() !== "" && formData.ano.trim() !== "";
      default:
        return true;
    }
  };

  const handleSubmit = async (e: any) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch("/api/ode", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...formData, userId: user?.id }),
      });
      const result = await response.json();
      if (result.success) {
        toast.success("Registro adicionado com sucesso!");
        router.push("/ode/lista");
      } else {
        toast.error(result.message || "Erro ao salvar.");
      }
    } catch (err) {
      console.error(err);
      toast.error("Erro de comunica√ß√£o com o servidor.");
    } finally {
      setLoading(false);
    }
  };

  if (!isLoaded || isVerifying) {
  return (
    <div className="flex justify-center items-center h-screen">
      <Loader2 className="h-8 w-8 animate-spin text-primary" />
    </div>
  );
}

if (!hasPermission) {
  return null; // j√° redirecionou no useEffect
}

  return (
    <ProtectedRoute>
      <div className="flex bg-white min-h-screen w-full">
        <div style={{ zoom: "80%" }} className="h-screen overflow-auto">
          <Sidebar />
        </div>
        <main className="flex-1 p-8 overflow-auto">
          <div className="max-w-5xl mx-auto bg-white p-8 rounded-2xl shadow-md">
            <h1 className="text-3xl font-bold mb-6 text-center">
              Novo Registro de A√ß√£o (ODE)
            </h1>

            <form onSubmit={handleSubmit} className="space-y-8">
              {/* üîπ Etapa 1 - Identifica√ß√£o */}
              {step === 1 && (
                <div>
                  <h2 className="text-xl font-semibold mb-4">Identifica√ß√£o</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input
                      type="text"
                      value={formData.nome}
                      disabled
                      className="w-full border rounded p-3 bg-gray-100 text-gray-700"
                    />
                    <select
                      className="w-full border rounded p-3"
                      value={formData.setor}
                      onChange={(e) => handleChange("setor", e.target.value)}
                    >
                      <option value="">Selecione o Setor</option>
                      {setores.map((s) => (
                        <option key={s} value={s}>
                          {s}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              {/* üîπ Etapa 2 - Localiza√ß√£o */}
              {step === 2 && (
                <div>
                  <h2 className="text-xl font-semibold mb-4">Localiza√ß√£o</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <select
                      className="w-full border rounded p-3"
                      value={formData.regiao}
                      onChange={(e) => handleChange("regiao", e.target.value)}
                    >
                      <option value="">Selecione a Regi√£o</option>
                      <option value="todas">Todas as Regionais</option> {/* üîπ nova op√ß√£o */}
                      {Object.keys(regioes).map((r) => (
                        <option key={r} value={r}>
                          {r}
                        </option>
                      ))}
                    </select>

                    <select
                      className="w-full border rounded p-3"
                      value={formData.municipio}
                      onChange={(e) => handleChange("municipio", e.target.value)}
                      disabled={!formData.regiao}
                    >
                      <option value="">Selecione o Munic√≠pio</option>
                      {formData.regiao === "todas" ? (
                        <option value="TODOS">Todos os Munic√≠pios</option>
                      ) : (
                        formData.regiao &&
                        regioes[formData.regiao]?.map((m) => (
                          <option key={m} value={m}>
                            {m}
                          </option>
                        ))
                      )}
                    </select>

                  </div>
                </div>
              )}

              {/* üîπ Etapa 3 - Detalhes */}
              {step === 3 && (
                <div>
                  <h2 className="text-xl font-semibold mb-4">Detalhes</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <select
                      className="w-full border rounded p-3"
                      value={formData.descricao}
                      onChange={(e) => handleChange("descricao", e.target.value)}
                    >
                      <option value="">Selecione a Descri√ß√£o</option>
                      {descricoes.map((d) => (
                        <option key={d} value={d}>
                          {d}
                        </option>
                      ))}
                    </select>
                    {formData.descricao === "Outro" && (
                      <input
                        type="text"
                        placeholder="Especifique aqui"
                        className="w-full border rounded p-3"
                        value={formData.outro}
                        onChange={(e) => handleChange("outro", e.target.value)}
                      />
                    )}
                    <select
                      className="w-full border rounded p-3"
                      value={formData.obra}
                      onChange={(e) => handleChange("obra", e.target.value)}
                    >
                      <option value="">Obra?</option>
                      <option value="Sim">Sim</option>
                      <option value="N√£o">N√£o</option>
                    </select>
                    <select
                      className="w-full border rounded p-3"
                      value={formData.servico}
                      onChange={(e) => handleChange("servico", e.target.value)}
                    >
                      <option value="">Servi√ßo?</option>
                      <option value="Sim">Sim</option>
                      <option value="N√£o">N√£o</option>
                    </select>
                  </div>
                </div>
              )}

                          {/* üîπ Etapa 4 - Programa e A√ß√£o */}
              {step === 4 && (
                <div>
                  <h2 className="text-xl font-semibold mb-4">Programa e A√ß√£o</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <select
                      className="w-full border rounded p-3"
                      value={formData.programa}
                      onChange={(e) => handleChange("programa", e.target.value)}
                    >
                      <option value="">Selecione o Programa</option>
                      {programas.map((p) => (
                        <option key={p} value={p}>
                          {p}
                        </option>
                      ))}
                    </select>
                    <select
                      className="w-full border rounded p-3"
                      value={formData.acao}
                      onChange={(e) => handleChange("acao", e.target.value)}
                    >
                      <option value="">Selecione a A√ß√£o</option>
                      {acoes.map((a) => (
                        <option key={a} value={a}>
                          {a}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              {/* üîπ Etapa 5 - Finaliza√ß√£o */}
              {step === 5 && (
                <div>
                  <h2 className="text-xl font-semibold mb-4">Finaliza√ß√£o</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input
                      type="number"
                      placeholder="Quantidade de Benef√≠cios/Benefici√°rios"
                      className="w-full border rounded p-3"
                      value={formData.qtdBeneficios}
                      onChange={(e) =>
                        handleChange("qtdBeneficios", e.target.value)
                      }
                    />
                    <select
                      className="w-full border rounded p-3"
                      value={formData.status}
                      onChange={(e) => handleChange("status", e.target.value)}
                    >
                      <option value="">Selecione o Status</option>
                      {statusOptions.map((s) => (
                        <option key={s} value={s}>
                          {s}
                        </option>
                      ))}
                    </select>
                    <input
                      type="number"
                      placeholder="Ano"
                      className="w-full border rounded p-3"
                      value={formData.ano}
                      onChange={(e) => handleChange("ano", e.target.value)}
                    />
                    <input
                      type="number"
                      placeholder="Valor"
                      className="w-full border rounded p-3"
                      value={formData.valor}
                      onChange={(e) => handleChange("valor", e.target.value)}
                    />
                    <input
                      type="text"
                      placeholder="Fonte de Recurso"
                      className="w-full border rounded p-3 col-span-2"
                      value={formData.fonte}
                      onChange={(e) => handleChange("fonte", e.target.value)}
                    />
                  </div>
                </div>
              )}

              {/* üîπ Navega√ß√£o entre etapas */}
              <div className="flex justify-end pt-4 space-x-2">
                {step > 1 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setStep(step - 1)}
                  >
                    Voltar
                  </Button>
                )}
                {step < 5 ? (
                  <Button
                    type="button"
                    onClick={() => setStep(step + 1)}
                    disabled={!isStepValid(step)}
                  >
                    Pr√≥ximo
                  </Button>
                ) : (
                  <Button type="submit" disabled={loading || !isStepValid(5)}>
                    {loading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      "Salvar Registro"
                    )}
                  </Button>
                )}
              </div>
            </form>
          </div>
        </main>
      </div>
    </ProtectedRoute>
  );
}
